#!/bin/bash
#一个方便的小脚本,用于自动在当前目录生成工作区

set -e
INSTALL_PATH=~/.rosup
DIR=$1
if [[ ! -v 1 ]]; then 
   read -p "请输入要创建工作区的目录:" DIR
fi


# 4. 创建目录并复制部署文件
echo "正在创建工作区"
mkdir -p $DIR
# 复制 deploy 文件夹的内容
rsync -av $INSTALL_PATH/deploy/ $DIR

# 5. 允许 X11 连接
echo "允许本地 X11 连接 (xhost)..."
xhost +local:docker

# GPU权限管理(Gemini太好用了你们知道吗)
echo "正在检测GPU/渲染权限..."

# Find GIDs for 'video' and 'render' groups on the host
# Use '|| true' to avoid script exit if group doesn't exist
# We get the GID (Group ID), which is the number Docker needs.
GID_VIDEO=$(getent group video | cut -d: -f3 || true)
GID_RENDER=$(getent group render | cut -d: -f3 || true)

ENV_FILE="$DIR/.env"
echo "正在创建 $ENV_FILE ..."

echo "# This file is auto-generated by rosup.sh" > $ENV_FILE
echo "# It contains host-specific Group IDs for Docker GPU access." >> $ENV_FILE

if [[ -n "$GID_VIDEO" ]]; then
    echo "GID_VIDEO=$GID_VIDEO" >> $ENV_FILE
    echo "检测到 'video' 组 GID: $GID_VIDEO"
else
    echo "# GID_VIDEO=" >> $ENV_FILE
    echo "未检测到 'video' 组. (This is OK if not present)"
fi

if [[ -n "$GID_RENDER" ]]; then
    echo "GID_RENDER=$GID_RENDER" >> $ENV_FILE
    echo "检测到 'render' 组 GID: $GID_RENDER"
else
    echo "# GID_RENDER=" >> $ENV_FILE
    echo "未检测到 'render' 组. (This is OK if not present)"
fi

set -e

echo "   成功! ROS2开发环境已搭建!"